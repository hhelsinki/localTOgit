{"ast":null,"code":"const util = require(\"./util\");\n\nfunction getSocketSignatureForUser(token, socketId, userData) {\n  const serializedUserData = JSON.stringify(userData);\n  const signature = token.sign(`${socketId}::user::${serializedUserData}`);\n  return {\n    auth: `${token.key}:${signature}`,\n    user_data: serializedUserData\n  };\n}\n\nfunction getSocketSignature(pusher, token, channel, socketID, data) {\n  const result = {};\n  const signatureData = [socketID, channel];\n\n  if (data) {\n    const serializedData = JSON.stringify(data);\n    signatureData.push(serializedData);\n    result.channel_data = serializedData;\n  }\n\n  result.auth = token.key + \":\" + token.sign(signatureData.join(\":\"));\n\n  if (util.isEncryptedChannel(channel)) {\n    if (pusher.config.encryptionMasterKey === undefined) {\n      throw new Error(\"Cannot generate shared_secret because encryptionMasterKey is not set\");\n    }\n\n    result.shared_secret = Buffer.from(pusher.channelSharedSecret(channel)).toString(\"base64\");\n  }\n\n  return result;\n}\n\nexports.getSocketSignatureForUser = getSocketSignatureForUser;\nexports.getSocketSignature = getSocketSignature;","map":{"version":3,"names":["util","require","getSocketSignatureForUser","token","socketId","userData","serializedUserData","JSON","stringify","signature","sign","auth","key","user_data","getSocketSignature","pusher","channel","socketID","data","result","signatureData","serializedData","push","channel_data","join","isEncryptedChannel","config","encryptionMasterKey","undefined","Error","shared_secret","Buffer","from","channelSharedSecret","toString","exports"],"sources":["/home/hhelsinki/sandbox-react/react-app/node_modules/pusher/lib/auth.js"],"sourcesContent":["const util = require(\"./util\")\n\nfunction getSocketSignatureForUser(token, socketId, userData) {\n  const serializedUserData = JSON.stringify(userData)\n  const signature = token.sign(`${socketId}::user::${serializedUserData}`)\n  return {\n    auth: `${token.key}:${signature}`,\n    user_data: serializedUserData,\n  }\n}\n\nfunction getSocketSignature(pusher, token, channel, socketID, data) {\n  const result = {}\n\n  const signatureData = [socketID, channel]\n  if (data) {\n    const serializedData = JSON.stringify(data)\n    signatureData.push(serializedData)\n    result.channel_data = serializedData\n  }\n\n  result.auth = token.key + \":\" + token.sign(signatureData.join(\":\"))\n\n  if (util.isEncryptedChannel(channel)) {\n    if (pusher.config.encryptionMasterKey === undefined) {\n      throw new Error(\n        \"Cannot generate shared_secret because encryptionMasterKey is not set\"\n      )\n    }\n    result.shared_secret = Buffer.from(\n      pusher.channelSharedSecret(channel)\n    ).toString(\"base64\")\n  }\n\n  return result\n}\n\nexports.getSocketSignatureForUser = getSocketSignatureForUser\nexports.getSocketSignature = getSocketSignature\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,SAASC,yBAAT,CAAmCC,KAAnC,EAA0CC,QAA1C,EAAoDC,QAApD,EAA8D;EAC5D,MAAMC,kBAAkB,GAAGC,IAAI,CAACC,SAAL,CAAeH,QAAf,CAA3B;EACA,MAAMI,SAAS,GAAGN,KAAK,CAACO,IAAN,CAAY,GAAEN,QAAS,WAAUE,kBAAmB,EAApD,CAAlB;EACA,OAAO;IACLK,IAAI,EAAG,GAAER,KAAK,CAACS,GAAI,IAAGH,SAAU,EAD3B;IAELI,SAAS,EAAEP;EAFN,CAAP;AAID;;AAED,SAASQ,kBAAT,CAA4BC,MAA5B,EAAoCZ,KAApC,EAA2Ca,OAA3C,EAAoDC,QAApD,EAA8DC,IAA9D,EAAoE;EAClE,MAAMC,MAAM,GAAG,EAAf;EAEA,MAAMC,aAAa,GAAG,CAACH,QAAD,EAAWD,OAAX,CAAtB;;EACA,IAAIE,IAAJ,EAAU;IACR,MAAMG,cAAc,GAAGd,IAAI,CAACC,SAAL,CAAeU,IAAf,CAAvB;IACAE,aAAa,CAACE,IAAd,CAAmBD,cAAnB;IACAF,MAAM,CAACI,YAAP,GAAsBF,cAAtB;EACD;;EAEDF,MAAM,CAACR,IAAP,GAAcR,KAAK,CAACS,GAAN,GAAY,GAAZ,GAAkBT,KAAK,CAACO,IAAN,CAAWU,aAAa,CAACI,IAAd,CAAmB,GAAnB,CAAX,CAAhC;;EAEA,IAAIxB,IAAI,CAACyB,kBAAL,CAAwBT,OAAxB,CAAJ,EAAsC;IACpC,IAAID,MAAM,CAACW,MAAP,CAAcC,mBAAd,KAAsCC,SAA1C,EAAqD;MACnD,MAAM,IAAIC,KAAJ,CACJ,sEADI,CAAN;IAGD;;IACDV,MAAM,CAACW,aAAP,GAAuBC,MAAM,CAACC,IAAP,CACrBjB,MAAM,CAACkB,mBAAP,CAA2BjB,OAA3B,CADqB,EAErBkB,QAFqB,CAEZ,QAFY,CAAvB;EAGD;;EAED,OAAOf,MAAP;AACD;;AAEDgB,OAAO,CAACjC,yBAAR,GAAoCA,yBAApC;AACAiC,OAAO,CAACrB,kBAAR,GAA6BA,kBAA7B"},"metadata":{},"sourceType":"script"}