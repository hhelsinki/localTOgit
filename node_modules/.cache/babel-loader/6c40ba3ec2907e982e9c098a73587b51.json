{"ast":null,"code":"const util = require(\"./util\");\n\nconst nacl = require(\"tweetnacl\");\n\nconst naclUtil = require(\"tweetnacl-util\");\n\nfunction encrypt(pusher, channel, data) {\n  if (pusher.config.encryptionMasterKey === undefined) {\n    throw new Error(\"Set encryptionMasterKey before triggering events on encrypted channels\");\n  }\n\n  const nonceBytes = nacl.randomBytes(24);\n  const ciphertextBytes = nacl.secretbox(naclUtil.decodeUTF8(JSON.stringify(data)), nonceBytes, pusher.channelSharedSecret(channel));\n  return JSON.stringify({\n    nonce: naclUtil.encodeBase64(nonceBytes),\n    ciphertext: naclUtil.encodeBase64(ciphertextBytes)\n  });\n}\n\nexports.trigger = function (pusher, channels, eventName, data, params) {\n  if (channels.length === 1 && util.isEncryptedChannel(channels[0])) {\n    const channel = channels[0];\n    const event = {\n      name: eventName,\n      data: encrypt(pusher, channel, data),\n      channels: [channel],\n      ...params\n    };\n    return pusher.post({\n      path: \"/events\",\n      body: event\n    });\n  } else {\n    for (let i = 0; i < channels.length; i++) {\n      if (util.isEncryptedChannel(channels[i])) {\n        // For rationale, see limitations of end-to-end encryption in the README\n        throw new Error(\"You cannot trigger to multiple channels when using encrypted channels\");\n      }\n    }\n\n    const event = {\n      name: eventName,\n      data: ensureJSON(data),\n      channels: channels,\n      ...params\n    };\n    return pusher.post({\n      path: \"/events\",\n      body: event\n    });\n  }\n};\n\nexports.triggerBatch = function (pusher, batch) {\n  for (let i = 0; i < batch.length; i++) {\n    batch[i].data = util.isEncryptedChannel(batch[i].channel) ? encrypt(pusher, batch[i].channel, batch[i].data) : ensureJSON(batch[i].data);\n  }\n\n  return pusher.post({\n    path: \"/batch_events\",\n    body: {\n      batch: batch\n    }\n  });\n};\n\nfunction ensureJSON(data) {\n  return typeof data === \"string\" ? data : JSON.stringify(data);\n}","map":{"version":3,"names":["util","require","nacl","naclUtil","encrypt","pusher","channel","data","config","encryptionMasterKey","undefined","Error","nonceBytes","randomBytes","ciphertextBytes","secretbox","decodeUTF8","JSON","stringify","channelSharedSecret","nonce","encodeBase64","ciphertext","exports","trigger","channels","eventName","params","length","isEncryptedChannel","event","name","post","path","body","i","ensureJSON","triggerBatch","batch"],"sources":["/home/hhelsinki/sandbox-react/react-app/node_modules/pusher/lib/events.js"],"sourcesContent":["const util = require(\"./util\")\nconst nacl = require(\"tweetnacl\")\nconst naclUtil = require(\"tweetnacl-util\")\n\nfunction encrypt(pusher, channel, data) {\n  if (pusher.config.encryptionMasterKey === undefined) {\n    throw new Error(\n      \"Set encryptionMasterKey before triggering events on encrypted channels\"\n    )\n  }\n\n  const nonceBytes = nacl.randomBytes(24)\n\n  const ciphertextBytes = nacl.secretbox(\n    naclUtil.decodeUTF8(JSON.stringify(data)),\n    nonceBytes,\n    pusher.channelSharedSecret(channel)\n  )\n\n  return JSON.stringify({\n    nonce: naclUtil.encodeBase64(nonceBytes),\n    ciphertext: naclUtil.encodeBase64(ciphertextBytes),\n  })\n}\n\nexports.trigger = function (pusher, channels, eventName, data, params) {\n  if (channels.length === 1 && util.isEncryptedChannel(channels[0])) {\n    const channel = channels[0]\n    const event = {\n      name: eventName,\n      data: encrypt(pusher, channel, data),\n      channels: [channel],\n      ...params,\n    }\n    return pusher.post({ path: \"/events\", body: event })\n  } else {\n    for (let i = 0; i < channels.length; i++) {\n      if (util.isEncryptedChannel(channels[i])) {\n        // For rationale, see limitations of end-to-end encryption in the README\n        throw new Error(\n          \"You cannot trigger to multiple channels when using encrypted channels\"\n        )\n      }\n    }\n\n    const event = {\n      name: eventName,\n      data: ensureJSON(data),\n      channels: channels,\n      ...params,\n    }\n    return pusher.post({ path: \"/events\", body: event })\n  }\n}\n\nexports.triggerBatch = function (pusher, batch) {\n  for (let i = 0; i < batch.length; i++) {\n    batch[i].data = util.isEncryptedChannel(batch[i].channel)\n      ? encrypt(pusher, batch[i].channel, batch[i].data)\n      : ensureJSON(batch[i].data)\n  }\n  return pusher.post({ path: \"/batch_events\", body: { batch: batch } })\n}\n\nfunction ensureJSON(data) {\n  return typeof data === \"string\" ? data : JSON.stringify(data)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}