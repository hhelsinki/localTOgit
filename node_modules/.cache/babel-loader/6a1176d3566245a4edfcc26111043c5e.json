{"ast":null,"code":"import { useContext, useState, useRef, useEffect } from 'react';\nimport { GoogleApiContext } from './GoogleApiContext.js';\n\nfunction useGoogleApi() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    gapi,\n    configure\n  } = useContext(GoogleApiContext) ?? {};\n  const [configureState, setConfigureState] = useState();\n  const mounted = useRef(true);\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  });\n  const [, rerender] = useState();\n  const auth = gapi?.auth2?.getAuthInstance();\n  useEffect(() => {\n    if (auth) {\n      auth.isSignedIn.listen(() => mounted.current && rerender({}));\n      auth.currentUser.listen(() => mounted.current && rerender({}));\n    }\n  }, [auth]);\n  return configure ? configure(options, newState => mounted.current && newState !== configureState && setConfigureState(newState)) : undefined;\n}\n\nexport { useGoogleApi };","map":{"version":3,"names":["useContext","useState","useRef","useEffect","GoogleApiContext","useGoogleApi","options","gapi","configure","configureState","setConfigureState","mounted","current","rerender","auth","auth2","getAuthInstance","isSignedIn","listen","currentUser","newState","undefined"],"sources":["/home/hhelsinki/sandbox-react/react-app/node_modules/react-gapi/dist/esm/useGoogleApi.js"],"sourcesContent":["import { useContext, useState, useRef, useEffect } from 'react';\nimport { GoogleApiContext } from './GoogleApiContext.js';\n\nfunction useGoogleApi(options = {}) {\n    const { gapi , configure  } = useContext(GoogleApiContext) ?? {};\n    const [configureState, setConfigureState] = useState();\n    const mounted = useRef(true);\n    useEffect(()=>{\n        mounted.current = true;\n        return ()=>{\n            mounted.current = false;\n        };\n    });\n    const [, rerender] = useState();\n    const auth = gapi?.auth2?.getAuthInstance();\n    useEffect(()=>{\n        if (auth) {\n            auth.isSignedIn.listen(()=>mounted.current && rerender({})\n            );\n            auth.currentUser.listen(()=>mounted.current && rerender({})\n            );\n        }\n    }, [\n        auth\n    ]);\n    return configure ? configure(options, (newState)=>mounted.current && newState !== configureState && setConfigureState(newState)\n    ) : undefined;\n}\n\nexport { useGoogleApi };\n"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,QAArB,EAA+BC,MAA/B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,SAASC,gBAAT,QAAiC,uBAAjC;;AAEA,SAASC,YAAT,GAAoC;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EAChC,MAAM;IAAEC,IAAF;IAASC;EAAT,IAAwBR,UAAU,CAACI,gBAAD,CAAV,IAAgC,EAA9D;EACA,MAAM,CAACK,cAAD,EAAiBC,iBAAjB,IAAsCT,QAAQ,EAApD;EACA,MAAMU,OAAO,GAAGT,MAAM,CAAC,IAAD,CAAtB;EACAC,SAAS,CAAC,MAAI;IACVQ,OAAO,CAACC,OAAR,GAAkB,IAAlB;IACA,OAAO,MAAI;MACPD,OAAO,CAACC,OAAR,GAAkB,KAAlB;IACH,CAFD;EAGH,CALQ,CAAT;EAMA,MAAM,GAAGC,QAAH,IAAeZ,QAAQ,EAA7B;EACA,MAAMa,IAAI,GAAGP,IAAI,EAAEQ,KAAN,EAAaC,eAAb,EAAb;EACAb,SAAS,CAAC,MAAI;IACV,IAAIW,IAAJ,EAAU;MACNA,IAAI,CAACG,UAAL,CAAgBC,MAAhB,CAAuB,MAAIP,OAAO,CAACC,OAAR,IAAmBC,QAAQ,CAAC,EAAD,CAAtD;MAEAC,IAAI,CAACK,WAAL,CAAiBD,MAAjB,CAAwB,MAAIP,OAAO,CAACC,OAAR,IAAmBC,QAAQ,CAAC,EAAD,CAAvD;IAEH;EACJ,CAPQ,EAON,CACCC,IADD,CAPM,CAAT;EAUA,OAAON,SAAS,GAAGA,SAAS,CAACF,OAAD,EAAWc,QAAD,IAAYT,OAAO,CAACC,OAAR,IAAmBQ,QAAQ,KAAKX,cAAhC,IAAkDC,iBAAiB,CAACU,QAAD,CAAzF,CAAZ,GACZC,SADJ;AAEH;;AAED,SAAShB,YAAT"},"metadata":{},"sourceType":"module"}